data = read.table("~/Desktop/AquaMaps_Invertebrates.csv", header=T, sep=",")
head(data)
cols = c("Genus_valid", "Species_valid")
data$GS = apply( data[ , cols ] , 1 , paste , collapse = "-" )
head(data)
data$GS = apply( data[ , cols ] , 1 , paste , collapse = "_" )
length(unique(data$GS))
hist(data$Probability)
hist(data$Probability, breaks(seq(0,1,0.001)))
hist(data$Probability, breaks=seq(0,1,0.001))
hist(data$Probability, breaks=seq(0,1,0.0001))
hist(data$Probability, breaks=seq(0,1,0.00001))
y = 2:20
t = cbind(x,y)
x = 1:10
y = 2:20
t = cbind(x,y)
View(t)
x = 1:10
y = 11:20
t = cbind(x,y)
t = as.data.frame(t)
paste(t$x, t$y, sep="_")
#set up data
data = data.frame(y=rnorm(100), x=rep(c("X, Y","Z","A"), 25))
length(rep(c("X, Y","Z","A"), 25))
rep(c("X, Y","Z","A"), 25)
#set up data
data = data.frame(y=rnorm(100), x=sample(c("X, Y","Z","A"), 100))
#set up data
data = data.frame(y=rnorm(100), x=sample(c("X, Y","Z","A"), replace=T, 100))
model.out = lm(y~x, data=data)
summary(model.out)
model.out = lm(y~x-1, data=data)
summary(model.out)
#set up data
data = data.frame(y=rnorm(100), x=sample(c("X", "Y","Z","A"), replace=T, 100))
model.out = lm(y~x-1, data=data)
summary(model.out)
ndata = data.frame(y=data$y, x=sample(data$x, replace=F, nrow(data)))
out = lm(y~x-1, data=ndata)
out$coefficients
summary(out)$coeffs
summary(out)$coeff
summary(out)$coeff
permvalues = NULL
for(i in 1:1000){
ndata = data.frame(y=data$y, x=sample(data$x, replace=F, nrow(data)))
out = lm(y~x-1, data=ndata)
permvalue = cbind(permvalue, summary(out)$coeff[,3])
}
permvalues = NULL
for(i in 1:1000){
ndata = data.frame(y=data$y, x=sample(data$x, replace=F, nrow(data)))
out = lm(y~x-1, data=ndata)
permvalues = cbind(permvalues, summary(out)$coeff[,3])
}
permvalues
head(permvalues)
dim(permvalues)
View(permvalues)
genos = matrix(nrow=1,ncol=100)
genos[,1] = sample(c(0,1),replace=T,100)
genos[1,] = sample(c(0,1),replace=T,100)
genos
genos[,seq(1,ncol(genos),2)]
genos[,seq(2,ncol(genos),2)]
genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]
genos[1,genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]]
length(genos[1,genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]])
seq(1,ncol(genos),2)
seq(2,ncol(genos),2)
genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]
View(data)
View(genos)
genos[1,genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]]
length(genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)])
length(is.true(genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]))
sum(genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)])
sum(genos[,seq(1,ncol(genos),2)]!=genos[,seq(2,ncol(genos),2)])
sum(genos[ ,seq(1,ncol(genos),2)]!=genos[,seq(2,ncol(genos),2)])/(ncol(genos)/2)
ncol(genos)/2
het = data.frame(y = seq(0,1,0.01), x = seq(0,1,0.01))
het
het$y = 1/het$y
plot(het$x, het$y)
plot(het$x, het$y, type="l")
lines(x=het$x, y=het$x)
lines(x=het$x, y=rev(het$x))
hist(het$y)
plot(het$x, het$y/100, type="l")
1/het$x
1/het$x/100
het$x
library(readxl)
library(psych)
log(.1)
exp(11.79)
.1872043-.1775987
0.0096056/2
setwd("/Users/jrw0107/Google Drive/My Drive/teaching/WILD 7400 ABMs/WILD7400_growthchoice//")  #set working directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
#herbivores
K = 500                   #carrying capacity
maxsize    = 10           #maximum herbivore size, min is 1
maxsearch  = 10           #max number of actions an individual can take, summed across searching actions
searchnum  = 7
#food resources
lowsuccess.V  = c(0.9, 1 )         #how likely an individual is in finding low quality food
highsuccess.V = c(0.1, 0.2)       #how likely an individual is in finding high quality food
runvars = Replicates(lowsuccess.V, highsuccess.V)
r=1
#set parameter values
lowsuccess = runvars$lowsuccess[r]
highsuccess = runvars$highsuccess[r]
#initialize population of herbivores
herbs = data.frame(id = seq(1,K,1), size = rep(seq(1,maxsize,1),(K/maxsize)))
herbs$search = herbs$size + rnorm(K,0,1)
#poor fix for a complicated problem - too small/large search times
herbs$search[herbs$search < 0]  = 0
herbs$search[herbs$search > 10] = 10
#set up column to store food outcome
herbs$food = rep(NA, nrow(herbs))
#iterate over individuals in herbs
for(i in 1:nrow(herbs)){
#search for food (relationship between time searching and finding food, larger value is higher quality food)
searchresults = rnorm(searchnum, mean=(herbs$search[i]/10), sd=1/10)
searchresults[searchresults < 0] = 0
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
for(rr in 1:searchnum){
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
}
#record food collected
foodobtained = searchsuccess * searchresults
foodobtained = sum(foodobtained)
herbs$food[i] = foodobtained
}
searchnum
rr
searchsuccess
searchresults
searchsuccess * searchresults
#record food collected
foodobtained = searchsuccess * searchresults
foodobtained = sum(foodobtained)
foodobtained
herbs
tail(herbs)
i
herbs$food
herbs[429,]
i=429
#search for food (relationship between time searching and finding food, larger value is higher quality food)
searchresults = rnorm(searchnum, mean=(herbs$search[i]/10), sd=1/10)
searchresults[searchresults < 0] = 0
searchresults
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
for(rr in 1:searchnum){
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
}
searchsuccess
searchsuccess[4] = 1
lowsuccess
highsuccess
herbs
head(herbs)
plot(herbs$size, herbs$food)
plot(herbs$search, herbs$food)
mean(herbs$size)
mean(herbs$search)
mean(herbs$food)
mean(herbs$food, na.rm=T)
#summarizing and output
nreps   = 100
towrite = c("r","rep","K","maxsize","mazsearch","searchnum","lowsuccess","highsuccess",
"meansize","meansearch","meanfood","size_food_slope", "size_food_R2")                 #list of headers for everythign that you will include
write.table(t(towrite), paste(outdir,"outputsummary.csv", sep=""), append=F, sep=",", row.names=F, col.names=T)
write.table(t(towrite), paste(outdir,"outputsummary.csv", sep=""), append=F, sep=",", row.names=F, col.names=F)
#determine size and food relationship
lm.out = lm(x=herbs$size, y=herbs$food)
#determine size and food relationship
lm.out = lm(food~size, data=herbs)
summary(lm.out)
summary(lm.out)$coeff
runvafrs
runvars
head(herbs)
#determine size and food relationship
lm.out = lm(food~size, data=herbs)
summary(lm.out)
abline(lm.out)
summary(lm.out)$coeff
summary(lm.out)$coeff[2,1]
summary(lm.out)
names(summary(lm.out))
summary(lm.out)$r.squared
head(herbs)
summary(lm.out)
head(herbs)
runvars
#calculated some summaries
meansize = mean(herbs$size, na.rm=T)
meansearch = mean(herbs$search, na.rm=T)
meanfood = mean(herbs$food, na.rm=T)
herbs$food
mean(herbs$food)
towrite = c("r","rep","K","maxsize","mazsearch","searchnum","lowsuccess","highsuccess",
"meansize","meansearch","meanfood","size_food_slope", "size_food_R2")                 #list of headers for everything that you will include
write.table(t(towrite), paste(outdir,"outputsummary.csv", sep=""), append=F, sep=",", row.names=F, col.names=F)
r
rep
reps
reps=1
K
maxsize
mazsearch
maxsearch
searchnum
lowsuccess
highsuccess
meansize
meansearch
meanfood
size_food_slope
size_food_slope = summary(lm.out)$coeff[2,1]
size_food_R2 = summary(lm.out)$r.squared
size_food_R2
size_food_slope
#record data to file
towrite = c(r,reps,K,maxsize,maxsearch,searchnum,lowsuccess,highsuccess,
meansize,meansearch,meanfood,size_food_slope, size_food_R2)
towrite
#write data, append = F
write.table(t(towrite), paste(outdir,"outputsummary.csv", sep=""), append=T, sep=",", row.names=F, col.names=F)
