data = data.frame(y=rnorm(100), x=sample(c("X, Y","Z","A"), replace=T, 100))
model.out = lm(y~x, data=data)
summary(model.out)
model.out = lm(y~x-1, data=data)
summary(model.out)
#set up data
data = data.frame(y=rnorm(100), x=sample(c("X", "Y","Z","A"), replace=T, 100))
model.out = lm(y~x-1, data=data)
summary(model.out)
ndata = data.frame(y=data$y, x=sample(data$x, replace=F, nrow(data)))
out = lm(y~x-1, data=ndata)
out$coefficients
summary(out)$coeffs
summary(out)$coeff
summary(out)$coeff
permvalues = NULL
for(i in 1:1000){
ndata = data.frame(y=data$y, x=sample(data$x, replace=F, nrow(data)))
out = lm(y~x-1, data=ndata)
permvalue = cbind(permvalue, summary(out)$coeff[,3])
}
permvalues = NULL
for(i in 1:1000){
ndata = data.frame(y=data$y, x=sample(data$x, replace=F, nrow(data)))
out = lm(y~x-1, data=ndata)
permvalues = cbind(permvalues, summary(out)$coeff[,3])
}
permvalues
head(permvalues)
dim(permvalues)
View(permvalues)
genos = matrix(nrow=1,ncol=100)
genos[,1] = sample(c(0,1),replace=T,100)
genos[1,] = sample(c(0,1),replace=T,100)
genos
genos[,seq(1,ncol(genos),2)]
genos[,seq(2,ncol(genos),2)]
genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]
genos[1,genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]]
length(genos[1,genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]])
seq(1,ncol(genos),2)
seq(2,ncol(genos),2)
genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]
View(data)
View(genos)
genos[1,genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]]
length(genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)])
length(is.true(genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]))
sum(genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)])
sum(genos[,seq(1,ncol(genos),2)]!=genos[,seq(2,ncol(genos),2)])
sum(genos[ ,seq(1,ncol(genos),2)]!=genos[,seq(2,ncol(genos),2)])/(ncol(genos)/2)
ncol(genos)/2
het = data.frame(y = seq(0,1,0.01), x = seq(0,1,0.01))
het
het$y = 1/het$y
plot(het$x, het$y)
plot(het$x, het$y, type="l")
lines(x=het$x, y=het$x)
lines(x=het$x, y=rev(het$x))
hist(het$y)
plot(het$x, het$y/100, type="l")
1/het$x
1/het$x/100
het$x
library(readxl)
library(psych)
log(.1)
exp(11.79)
.1872043-.1775987
0.0096056/2
setwd("/Users/jrw0107/Google Drive/My Drive/teaching/WILD 7400 ABMs/WILD7400_growthchoice//")  #set working directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
#herbivores
K = 500                   #carrying capacity
maxsize    = 10           #maximum herbivore size, min is 1
maxsearch  = 10           #max number of actions an individual can take, summed across searching actions
#food resources
lowsuccess  = .9          #how likely an individual is in finding low quality food
highsuccess = .1          #how likely an individual is in finding high quality food
#run model iterating over parameters in Replicates
#for(r in 1:nrow(runvars)){
#initialize population of herbivores
herbs = data.frame(id = seq(1,K,1), size = rep(seq(1,maxsize,1),(K/maxsize)))
herbs$search = herbs$size + rnorm(K,0,1)
head(herbs)
###individual size vs. time searching####
#size = 1 to 10; normal distribution of values
isize = rnorm(1000, mean=5, sd=1)
hist(isize)
#time searching = 1 to 10; similar to size but should be some variability
time = isize + rnorm(1000,0,1)
hist(time)
plot(x=isize, y=time, pch=19, col="dodgerblue3", xlim=c(1,10), ylim=c(1,10), cex=.5)
abline(a=0,b=1)
###time searching vs. food quality; longer searches more likely to result in better quality###
#quality = 0 to 1, pulled from normal distribution using time/10 as mean
qual = NULL
for(i in 1:length(time)){
qual = c(qual, rnorm(1, mean=(time[i]/10), sd=1/10))
}
plot(x=time, y=qual, pch=19, col="firebrick3", xlim=c(1,10), ylim=c(0,1), cex=.5)
abline(a=0,b=(.1/1))
qual
head(herbs)
qual
i
i=1
herbs$search[i]
range(herbs$search)
#poor fix for a complicated problem - too small/large search times
herbs$search[herbs$search < 0]  = 0
herbs$search[herbs$search > 10] = 10
range(herbs$search)
nrow(herbs)
#search for food (relationship between time searching and finding food)
searchresults = rnorm(1, mean=(herbs$search[i]/10), sd=1/10)
searchresults
herbs$search[i]
1/10
.9-.1
.8*.106
+.1
1.0848/.9
0.848/.9
herbs$search[i]
herbs$search[i]/10
(.9-.1)*0.1064124
?rbinom
(lowsuccess-highsuccess)*searchresults)
((lowsuccess-highsuccess)*searchresults)
binom(1, 1, prob = ((lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = ((lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = ((lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = ((lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = ((lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = ((lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = ((lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = ((lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = ((lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = ((lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = ((lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = ((lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = ((lowsuccess-highsuccess)*searchresults))
rbinom(100, 1, prob = ((lowsuccess-highsuccess)*searchresults))
#success or not in search - uniform decrease from lowest food qual to highest food quality
hist(rbinom(100, 1, prob = ((lowsuccess-highsuccess)*searchresults)))
head(herbs)
#run model iterating over parameters in Replicates
#for(r in 1:nrow(runvars)){
#initialize population of herbivores
herbs = data.frame(id = seq(1,K,1), size = rep(seq(1,maxsize,1),(K/maxsize)))
herbs$search = herbs$size + rnorm(K,0,1)
herbs[1:20,]
rnorm(1, mean=(herbs$search[i]/10), sd=1/10)
.8*.18
1-(lowsuccess-highsuccess)*searchresults)
(1-(lowsuccess-highsuccess)*searchresults)
searchresults
highsuccess
lowsuccess
searchresults
#search for food (relationship between time searching and finding food, larger value is higher quality food)
searchresults = rnorm(1, mean=(herbs$search[i]/10), sd=1/10)
searchresults=0.18
searchresults
(1-(lowsuccess-highsuccess)*searchresults)
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
hist(rbinom(100, 1, prob = (1-(lowsuccess-highsuccess)*searchresults)))
searchnum  = 7
#search for food (relationship between time searching and finding food, larger value is higher quality food)
searchresults = rnorm(searchnum, mean=(herbs$search[i]/10), sd=1/10)
searchresults
(1-(lowsuccess-highsuccess)*searchresults)
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(1, 7, prob = (1-(lowsuccess-highsuccess)*searchresults))
rbinom(7, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults))
searchresults
rr=1
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
for(rr in 1:searchnum){
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
}
searchsuccess
searchresults
#record food collected
foodobtained = searchsuccess * searchresults
foodobtained
foodobtained = sum(foodobtained)
foodobtained
#set up column to store food outcome
herbs$food = rep(NA, nrow(herbs))
herbs$food
herbs$food = foodobtained
herbs$food
#set up column to store food outcome
herbs$food = rep(NA, nrow(herbs))
herbs$food[i] = foodobtained
###TBD: how many iterations should individuals forage, and how will we code that
###TBD: how will we record the food quality the individual finds each year/unit of time
}
herbs$food
head(herbs)
#run model iterating over parameters in Replicates
#for(r in 1:nrow(runvars)){
#initialize population of herbivores
herbs = data.frame(id = seq(1,K,1), size = rep(seq(1,maxsize,1),(K/maxsize)))
herbs$search = herbs$size + rnorm(K,0,1)
#poor fix for a complicated problem - too small/large search times
herbs$search[herbs$search < 0]  = 0
herbs$search[herbs$search > 10] = 10
#set up column to store food outcome
herbs$food = rep(NA, nrow(herbs))
#iterate over individuals in herbs
for(i in 1:nrow(herbs)){
#search for food (relationship between time searching and finding food, larger value is higher quality food)
searchresults = rnorm(searchnum, mean=(herbs$search[i]/10), sd=1/10)
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
for(rr in 1:searchnum){
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
}
#record food collected
foodobtained = searchsuccess * searchresults
foodobtained = sum(foodobtained)
herbs$food[i] = foodobtained
}
warnings()
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchresults[rr]
searchnum
setwd("/Users/jrw0107/Google Drive/My Drive/teaching/WILD 7400 ABMs/WILD7400_growthchoice//")  #set working directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
#herbivores
K = 500                   #carrying capacity
maxsize    = 10           #maximum herbivore size, min is 1
maxsearch  = 10           #max number of actions an individual can take, summed across searching actions
searchnum  = 7
#food resources
lowsuccess  = 0.9          #how likely an individual is in finding low quality food
highsuccess = 0.1          #how likely an individual is in finding high quality food
#run model iterating over parameters in Replicates
#for(r in 1:nrow(runvars)){
#initialize population of herbivores
herbs = data.frame(id = seq(1,K,1), size = rep(seq(1,maxsize,1),(K/maxsize)))
herbs$search = herbs$size + rnorm(K,0,1)
#poor fix for a complicated problem - too small/large search times
herbs$search[herbs$search < 0]  = 0
herbs$search[herbs$search > 10] = 10
#set up column to store food outcome
herbs$food = rep(NA, nrow(herbs))
#iterate over individuals in herbs
for(i in 1:nrow(herbs)){
#search for food (relationship between time searching and finding food, larger value is higher quality food)
searchresults = rnorm(searchnum, mean=(herbs$search[i]/10), sd=1/10)
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
for(rr in 1:searchnum){
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
}
#record food collected
foodobtained = searchsuccess * searchresults
foodobtained = sum(foodobtained)
herbs$food[i] = foodobtained
}
i
warnings()
tail(herbs)
#herbivores
K = 500                   #carrying capacity
maxsize    = 10           #maximum herbivore size, min is 1
maxsearch  = 10           #max number of actions an individual can take, summed across searching actions
searchnum  = 7
#food resources
lowsuccess  = 0.9          #how likely an individual is in finding low quality food
highsuccess = 0.1
#run model iterating over parameters in Replicates
#for(r in 1:nrow(runvars)){
#initialize population of herbivores
herbs = data.frame(id = seq(1,K,1), size = rep(seq(1,maxsize,1),(K/maxsize)))
herbs$search = herbs$size + rnorm(K,0,1)
#poor fix for a complicated problem - too small/large search times
herbs$search[herbs$search < 0]  = 0
herbs$search[herbs$search > 10] = 10
#set up column to store food outcome
herbs$food = rep(NA, nrow(herbs))
i=1
#search for food (relationship between time searching and finding food, larger value is higher quality food)
searchresults = rnorm(searchnum, mean=(herbs$search[i]/10), sd=1/10)
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
for(rr in 1:searchnum){
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
}
1:searchnum
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
rr=1
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
rr=2
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchresults
searchresults[2]
searchresults[rr]
(1-(lowsuccess-highsuccess)*searchresults[rr])
rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchresults
searchresults[searchresults<0] = 0
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
for(rr in 1:searchnum){
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
}
#run model iterating over parameters in Replicates
#for(r in 1:nrow(runvars)){
#initialize population of herbivores
herbs = data.frame(id = seq(1,K,1), size = rep(seq(1,maxsize,1),(K/maxsize)))
herbs$search = herbs$size + rnorm(K,0,1)
#poor fix for a complicated problem - too small/large search times
herbs$search[herbs$search < 0]  = 0
herbs$search[herbs$search > 10] = 10
#set up column to store food outcome
herbs$food = rep(NA, nrow(herbs))
#iterate over individuals in herbs
for(i in 1:nrow(herbs)){
#search for food (relationship between time searching and finding food, larger value is higher quality food)
searchresults = rnorm(searchnum, mean=(herbs$search[i]/10), sd=1/10)
searchresults[searchresults < 0] = 0
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
for(rr in 1:searchnum){
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
}
#record food collected
foodobtained = searchsuccess * searchresults
foodobtained = sum(foodobtained)
herbs$food[i] = foodobtained
}
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
for(rr in 1:searchnum){
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
}
#record food collected
foodobtained = searchsuccess * searchresults
foodobtained = sum(foodobtained)
herbs$food[i] = foodobtained
setwd("/Users/jrw0107/Google Drive/My Drive/teaching/WILD 7400 ABMs/WILD7400_growthchoice//")  #set working directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
#herbivores
K = 500                   #carrying capacity
maxsize    = 10           #maximum herbivore size, min is 1
maxsearch  = 10           #max number of actions an individual can take, summed across searching actions
searchnum  = 7
#food resources
lowsuccess  = 0.9          #how likely an individual is in finding low quality food
highsuccess = 0.1          #how likely an individual is in finding high quality food
#run model iterating over parameters in Replicates
#for(r in 1:nrow(runvars)){
#initialize population of herbivores
herbs = data.frame(id = seq(1,K,1), size = rep(seq(1,maxsize,1),(K/maxsize)))
herbs$search = herbs$size + rnorm(K,0,1)
#poor fix for a complicated problem - too small/large search times
herbs$search[herbs$search < 0]  = 0
herbs$search[herbs$search > 10] = 10
#set up column to store food outcome
herbs$food = rep(NA, nrow(herbs))
#iterate over individuals in herbs
for(i in 1:nrow(herbs)){
#search for food (relationship between time searching and finding food, larger value is higher quality food)
searchresults = rnorm(searchnum, mean=(herbs$search[i]/10), sd=1/10)
searchresults[searchresults < 0] = 0
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
for(rr in 1:searchnum){
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
}
#record food collected
foodobtained = searchsuccess * searchresults
foodobtained = sum(foodobtained)
herbs$food[i] = foodobtained
}
traceback(0)
#set up column to store food outcome
herbs$food = rep(NA, nrow(herbs))
i=1
#search for food (relationship between time searching and finding food, larger value is higher quality food)
searchresults = rnorm(searchnum, mean=(herbs$search[i]/10), sd=1/10)
searchresults[searchresults < 0] = 0
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
for(rr in 1:searchnum){
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
}
#record food collected
foodobtained = searchsuccess * searchresults
foodobtained = sum(foodobtained)
herbs$food[i] = foodobtained
i=2
#search for food (relationship between time searching and finding food, larger value is higher quality food)
searchresults = rnorm(searchnum, mean=(herbs$search[i]/10), sd=1/10)
searchresults[searchresults < 0] = 0
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
for(rr in 1:searchnum){
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
}
#record food collected
foodobtained = searchsuccess * searchresults
foodobtained = sum(foodobtained)
herbs$food[i] = foodobtained
#iterate over individuals in herbs
for(i in 1:nrow(herbs)){
#search for food (relationship between time searching and finding food, larger value is higher quality food)
searchresults = rnorm(searchnum, mean=(herbs$search[i]/10), sd=1/10)
searchresults[searchresults < 0] = 0
#success or not in each search (uniform decrease from lowest food qual to highest food quality)
searchsuccess = NULL
for(rr in 1:searchnum){
temp = rbinom(1, 1, prob = (1-(lowsuccess-highsuccess)*searchresults[rr]))
searchsuccess = c(searchsuccess, temp)
}
#record food collected
foodobtained = searchsuccess * searchresults
foodobtained = sum(foodobtained)
herbs$food[i] = foodobtained
}
searchresults
#food resources
lowsuccess  = c(0.9, 1)         #how likely an individual is in finding low quality food
highsuccess = c(0.1, 0.2)       #how likely an individual is in finding high quality food
highsuccess
#food resources
lowsuccess.V  = c(0.9, 1)         #how likely an individual is in finding low quality food
highsuccess.V = c(0.1, 0.2)       #how likely an individual is in finding high quality food
expand.grid(lowsuccess.V, highsuccess.V)
#food resources
lowsuccess.V  = c(0.9, 1, 0.4, 0.3, 0.1, 1)         #how likely an individual is in finding low quality food
replicates = expand.grid(lowsuccess.V, highsuccess.V)
expand.grid(lowsuccess.V, highsuccess.V)
colnames(replicates) = c("lowsuccess", "highsuccess")
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
runvars = Replicates(lowsuccess.V, highsuccess.V)
runvars
runvars = Replicates(lowsuccess.V, highsuccess.V)
runvars
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
runvars = Replicates(lowsuccess.V, highsuccess.V)
runvars
Replicates = function(lowsuccess.V, highsuccess.V) {
replicates = expand.grid(lowsuccess.V, highsuccess.V)
colnames(replicates) = c("lowsuccess", "highsuccessT")
return(replicates)
}
highsuccess = runvars$highsuccess[r]
r=1
#set parameter values
lowsuccess = runvars$lowsuccess[r]
highsuccess = runvars$highsuccess[r]
lowsuccess
highsuccess
head(runvars)
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
